var actorFactory, useCaseFactory, _;

_ = require('lodash');

actorFactory = function(roleObject, entityObject) {
  var actor, name;
  actor = {};
  for (name in roleObject) {
    if (_.isFunction(roleObject[name])) {
      actor[name] = roleObject[name].bind(entityObject);
    } else {
      actor[name] = roleObject[name];
    }
  }
  return actor;
};

useCaseFactory = function(useCaseFunction, roles) {
  return function(entities) {
    var actors, name;
    actors = {};
    for (name in entities) {
      actors[name] = actorFactory(roles[name], entities[name]);
    }
    return useCaseFunction(actors);
  };
};

exports.context = function(roles, useCases) {
  var internalUseCases, name;
  if (Object.keys(useCases || {}).length === 0) {
    throw new Error('A context must specify at least one use case');
  }
  internalUseCases = {};
  for (name in useCases) {
    internalUseCases[name] = useCaseFactory(useCases[name], roles);
  }
  return internalUseCases;
};

exports.hasRole = function(actor, role) {
  var name;
  for (name in role) {
    if (!actor.hasOwnProperty(name)) {
      return false;
    }
  }
  return true;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV1bm9taWEuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsK0JBQUE7O0FBQUEsQ0FBQSxHQUFJLE9BQUEsQ0FBUyxRQUFULENBQUosQ0FBQTs7QUFBQSxZQU9BLEdBQWUsU0FBQyxVQUFELEVBQWEsWUFBYixHQUFBO0FBR2IsTUFBQSxXQUFBO0FBQUEsRUFBQSxLQUFBLEdBQVEsRUFBUixDQUFBO0FBQ0EsT0FBQSxrQkFBQSxHQUFBO0FBQ0UsSUFBQSxJQUFHLENBQUMsQ0FBQyxVQUFGLENBQWEsVUFBVyxDQUFBLElBQUEsQ0FBeEIsQ0FBSDtBQUNFLE1BQUEsS0FBTSxDQUFBLElBQUEsQ0FBTixHQUFjLFVBQVcsQ0FBQSxJQUFBLENBQUssQ0FBQyxJQUFqQixDQUFzQixZQUF0QixDQUFkLENBREY7S0FBQSxNQUFBO0FBR0UsTUFBQSxLQUFNLENBQUEsSUFBQSxDQUFOLEdBQWMsVUFBVyxDQUFBLElBQUEsQ0FBekIsQ0FIRjtLQURGO0FBQUEsR0FEQTtBQU9BLFNBQU8sS0FBUCxDQVZhO0FBQUEsQ0FQZixDQUFBOztBQUFBLGNBb0JBLEdBQWlCLFNBQUMsZUFBRCxFQUFrQixLQUFsQixHQUFBO0FBQ2YsU0FBTyxTQUFDLFFBQUQsR0FBQTtBQUVMLFFBQUEsWUFBQTtBQUFBLElBQUEsTUFBQSxHQUFTLEVBQVQsQ0FBQTtBQUtBLFNBQUEsZ0JBQUEsR0FBQTtBQUNFLE1BQUEsTUFBTyxDQUFBLElBQUEsQ0FBUCxHQUFlLFlBQUEsQ0FBYSxLQUFNLENBQUEsSUFBQSxDQUFuQixFQUEwQixRQUFTLENBQUEsSUFBQSxDQUFuQyxDQUFmLENBREY7QUFBQSxLQUxBO1dBUUEsZUFBQSxDQUFnQixNQUFoQixFQVZLO0VBQUEsQ0FBUCxDQURlO0FBQUEsQ0FwQmpCLENBQUE7O0FBQUEsT0FpQ08sQ0FBQyxPQUFSLEdBQWtCLFNBQUMsS0FBRCxFQUFRLFFBQVIsR0FBQTtBQUNoQixNQUFBLHNCQUFBO0FBQUEsRUFBQSxJQUFHLE1BQU0sQ0FBQyxJQUFQLENBQVksUUFBQSxJQUFZLEVBQXhCLENBQTJCLENBQUMsTUFBNUIsS0FBc0MsQ0FBekM7QUFDRSxVQUFVLElBQUEsS0FBQSxDQUFPLDhDQUFQLENBQVYsQ0FERjtHQUFBO0FBQUEsRUFHQSxnQkFBQSxHQUFtQixFQUhuQixDQUFBO0FBSUEsT0FBQSxnQkFBQSxHQUFBO0FBQ0UsSUFBQSxnQkFBaUIsQ0FBQSxJQUFBLENBQWpCLEdBQXlCLGNBQUEsQ0FBZSxRQUFTLENBQUEsSUFBQSxDQUF4QixFQUErQixLQUEvQixDQUF6QixDQURGO0FBQUEsR0FKQTtBQU9BLFNBQU8sZ0JBQVAsQ0FSZ0I7QUFBQSxDQWpDbEIsQ0FBQTs7QUFBQSxPQTJDTyxDQUFDLE9BQVIsR0FBa0IsU0FBQyxLQUFELEVBQVEsSUFBUixHQUFBO0FBQ2hCLE1BQUEsSUFBQTtBQUFBLE9BQUEsWUFBQSxHQUFBO0FBQ0UsSUFBQSxJQUFHLENBQUEsS0FBUyxDQUFDLGNBQU4sQ0FBcUIsSUFBckIsQ0FBUDtBQUNFLGFBQU8sS0FBUCxDQURGO0tBREY7QUFBQSxHQUFBO0FBR0EsU0FBTyxJQUFQLENBSmdCO0FBQUEsQ0EzQ2xCLENBQUEiLCJmaWxlIjoiZXVub21pYS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIl8gPSByZXF1aXJlKCdsb2Rhc2gnKVxuXG4jIGFuIGFjdG9yIGZhY3RvcnkgaXMgcmVzcG9uc2libGUgdG8gY3JlYXRlIHByb3hpZXMgd2hpY2ggZW5jYXBzdWxhdGUgYSByb2xlIHNwZWNpZmljYXRpb24sIGV4cG9zaW5nIG9ubHkgdGhlIHJvbGVcbiMgc3BlY2lmaWMgbWV0aG9kcyBhbmQgYXR0cmlidXRlcyBhbmQgYXBwbHkgdGhvc2UgbWV0aG9kcyB0byB0aGUgZ2l2ZW4gZW50aXR5IG9iamVjdFxuIyB0aGlzIGVuZm9yY2VzIGEgc2VwYXJhdGlvbiBvZiBsb2dpYyBhbmQgbWFrZXMgOTklIHN1cmUgdGhlIG9yaWdpbmFsIHJvbGUgb2JqZWN0IGlzIG5vdCBwb2xsdXRlZCBieSBvdGhlciBjb250ZXh0c1xuIyB1bmZvcnR1bmF0ZWx5IGFzc2lnbmluZyB0aGUgcm9sZSBvYmplY3QgdG8gYSBwcm90b3R5cGUgaXMgbm90IGVub3VnaCBiZWNhdXNlIGl0IHdvdWxkIGJlIGltcG9zc2libGUgdG8gZXhlY3V0ZVxuIyBtZXRob2RzIHVzaW5nIHRoZSBhY3RvciBhcyBjb250ZXh0IG9mIHRoZSBmdW5jdGlvblxuYWN0b3JGYWN0b3J5ID0gKHJvbGVPYmplY3QsIGVudGl0eU9iamVjdCktPlxuICAjIGEgcm9sZU9iamVjdCBpcyB0aGUgc3BlY2lmaWNhdGlvbiBkZXNjcmliaW5nIGEgcm9sZVxuICAjIGFuIGFjdG9yIGlzIHRoZSBvYmplY3QgdG8gd2hpY2ggdGhlIHJvbGUgd2lsbCBiZSBhc3NpZ25lZFxuICBhY3RvciA9IHt9XG4gIGZvciBuYW1lIG9mIHJvbGVPYmplY3RcbiAgICBpZiBfLmlzRnVuY3Rpb24ocm9sZU9iamVjdFtuYW1lXSlcbiAgICAgIGFjdG9yW25hbWVdID0gcm9sZU9iamVjdFtuYW1lXS5iaW5kKGVudGl0eU9iamVjdClcbiAgICBlbHNlXG4gICAgICBhY3RvcltuYW1lXSA9IHJvbGVPYmplY3RbbmFtZV1cblxuICByZXR1cm4gYWN0b3JcblxuXG51c2VDYXNlRmFjdG9yeSA9ICh1c2VDYXNlRnVuY3Rpb24sIHJvbGVzKS0+XG4gIHJldHVybiAoZW50aXRpZXMpLT5cbiAgICAjIHRoZSBnaXZlbiBlbnRpdGllcyBvYmplY3QgbmVlZCB0byBtYXRjaCB0aGUgcHJldmlvdXNseSBnaXZlbiByb2xlcyBmb3IgdGhlIGNvbnRleHRcbiAgICBhY3RvcnMgPSB7fVxuICAgICMgYXNzaWduIHJvbGVzIHRvIGVudGl0aWVzLCBtYWtpbmcgdGhlbSBhY3RvclxuICAgICMgdGhpcyBraW5kIG9mIGFzc2lnbm1lbnQgd2lsbCBhbHNvIG1ha2Ugc3VyZSB0aGF0IGEgZ2l2ZW4gZW50aXR5IGNhbiBpbXBlcnNvbmF0ZSBtdWx0aXBsZSByb2xlcyBidXQgYW55IHNpbmdsZVxuICAgICMgcm9sZSBjYW4gb25seSBiZSBnaXZlbiB0byBvbmUgYWN0b3JcbiAgICAjIGUuZy4ge3dhaXRlcjogb2JqMSwgbWFuYWdlcjogb2JqMiwgbW90aGVyOiBvYmoxfVxuICAgIGZvciBuYW1lIG9mIGVudGl0aWVzXG4gICAgICBhY3RvcnNbbmFtZV0gPSBhY3RvckZhY3Rvcnkocm9sZXNbbmFtZV0sIGVudGl0aWVzW25hbWVdKVxuXG4gICAgdXNlQ2FzZUZ1bmN0aW9uKGFjdG9ycylcblxuZXhwb3J0cy5jb250ZXh0ID0gKHJvbGVzLCB1c2VDYXNlcyktPlxuICBpZiBPYmplY3Qua2V5cyh1c2VDYXNlcyB8fCB7fSkubGVuZ3RoID09IDBcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgY29udGV4dCBtdXN0IHNwZWNpZnkgYXQgbGVhc3Qgb25lIHVzZSBjYXNlJylcblxuICBpbnRlcm5hbFVzZUNhc2VzID0ge31cbiAgZm9yIG5hbWUgb2YgdXNlQ2FzZXNcbiAgICBpbnRlcm5hbFVzZUNhc2VzW25hbWVdID0gdXNlQ2FzZUZhY3RvcnkodXNlQ2FzZXNbbmFtZV0sIHJvbGVzKVxuXG4gIHJldHVybiBpbnRlcm5hbFVzZUNhc2VzXG5cbmV4cG9ydHMuaGFzUm9sZSA9IChhY3Rvciwgcm9sZSktPlxuICBmb3IgbmFtZSBvZiByb2xlXG4gICAgaWYgbm90IGFjdG9yLmhhc093blByb3BlcnR5KG5hbWUpXG4gICAgICByZXR1cm4gZmFsc2VcbiAgcmV0dXJuIHRydWVcbiJdfQ==