var Actor, Role, useCaseFactory;

Role = (function() {
  function Role(spec, entityInterface) {
    this.validateSpec(spec);
    this.spec = spec;
    this.entityInterface = entityInterface;
  }

  Role.prototype.validateSpec = function(spec) {
    var name, _results;
    _results = [];
    for (name in spec) {
      if (!(spec[name] instanceof Function)) {
        throw new Error('Given spec is not accepted');
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Role.prototype.validateInterfaceAgainst = function(entity) {
    var name, _results;
    if (this.entityInterface) {
      _results = [];
      for (name in this.entityInterface) {
        if (!(entity[name] instanceof this.entityInterface[name])) {
          throw new Error("Given entity does not comply to the role's needed interface, attribute missing: `" + name + "` of type " + this.entityInterface[name]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };

  Role.prototype.applyTo = function(entity) {
    this.validateInterfaceAgainst(entity);
    return new Actor(this, entity);
  };

  return Role;

})();

Actor = (function() {
  function Actor(role, entity) {
    var name;
    this.entity = entity;
    this.role = role;
    for (name in this.role.spec) {
      this[name] = this.role.spec[name].bind(this.entity);
    }
  }

  return Actor;

})();

useCaseFactory = function(roles, method) {
  return function(entities) {
    var actors, name;
    actors = {};
    for (name in entities) {
      actors[name] = roles[name].applyTo(entities[name]);
    }
    return method.call(null, actors);
  };
};

exports.context = function(roles, useCases) {
  var name, useCasesProxies;
  for (name in roles) {
    if (!(roles[name] instanceof Role)) {
      throw new Error("Roles can only be instances of Role");
    }
  }
  if (Object.keys(useCases).length === 0) {
    throw new Error('Context must be able to enact at least one use case');
  }
  useCasesProxies = {};
  for (name in useCases) {
    useCasesProxies[name] = useCaseFactory(roles, useCases[name]);
  }
  return useCasesProxies;
};

exports.role = function(roleSpec, entityInterface) {
  return new Role(roleSpec, entityInterface);
};

//# sourceMappingURL=data:application/json;base64,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QVA7QUFDRSxZQUFVLElBQUEsS0FBQSxDQUFPLHFDQUFQLENBQVYsQ0FERjtLQURGO0FBQUEsR0FBQTtBQUlBLEVBQUEsSUFBRyxNQUFNLENBQUMsSUFBUCxDQUFZLFFBQVosQ0FBcUIsQ0FBQyxNQUF0QixLQUFnQyxDQUFuQztBQUNFLFVBQVUsSUFBQSxLQUFBLENBQU8scURBQVAsQ0FBVixDQURGO0dBSkE7QUFBQSxFQU9BLGVBQUEsR0FBa0IsRUFQbEIsQ0FBQTtBQVFBLE9BQUEsZ0JBQUEsR0FBQTtBQUNFLElBQUEsZUFBZ0IsQ0FBQSxJQUFBLENBQWhCLEdBQXdCLGNBQUEsQ0FBZSxLQUFmLEVBQXNCLFFBQVMsQ0FBQSxJQUFBLENBQS9CLENBQXhCLENBREY7QUFBQSxHQVJBO0FBV0EsU0FBTyxlQUFQLENBYmdCO0FBQUEsQ0FoRGxCLENBQUE7O0FBQUEsT0ErRE8sQ0FBQyxJQUFSLEdBQWUsU0FBQyxRQUFELEVBQVcsZUFBWCxHQUFBO0FBQ2IsU0FBVyxJQUFBLElBQUEsQ0FBSyxRQUFMLEVBQWUsZUFBZixDQUFYLENBRGE7QUFBQSxDQS9EZixDQUFBIiwiZmlsZSI6ImV1bm9taWEuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyIjIFRPRE86IGluc3RhbmNlb2YgaXMgbm90IHJlbGlhYmxlLCB1c2Ugc29tZXRoaW5nIGVsc2VcblxuY2xhc3MgUm9sZVxuICBjb25zdHJ1Y3RvcjogKHNwZWMsIGVudGl0eUludGVyZmFjZSktPlxuICAgICMgc3BlYyByZXByZXNlbnRzIHRoZSByb2xlJ3MgbWV0aG9kcywgbmVlZCB0byBjb250YWluIG9ubHkgbWV0aG9kcyBhbmQgbm8gc3RhdGVcbiAgICBAdmFsaWRhdGVTcGVjKHNwZWMpXG4gICAgQHNwZWMgPSBzcGVjXG4gICAgIyBlbnRpdHlJbnRlcmZhY2UgaXMgYSBub24gbWFuZGF0b3J5IGludGVyZmFjZSB0byB3aGljaCBlbnRpdGllcyBuZWVkIHRvIGNvbXBseSB0b1xuICAgIEBlbnRpdHlJbnRlcmZhY2UgPSBlbnRpdHlJbnRlcmZhY2VcblxuICB2YWxpZGF0ZVNwZWM6IChzcGVjKS0+XG4gICAgIyBkZWZpbmVkIHNwZWMgbXVzdCBjb250YWluIG9ubHkgbWV0aG9kc1xuICAgIGZvciBuYW1lIG9mIHNwZWNcbiAgICAgIGlmIG5vdCAoc3BlY1tuYW1lXSBpbnN0YW5jZW9mIEZ1bmN0aW9uKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dpdmVuIHNwZWMgaXMgbm90IGFjY2VwdGVkJylcblxuICB2YWxpZGF0ZUludGVyZmFjZUFnYWluc3Q6IChlbnRpdHkpLT5cbiAgICBpZiBAZW50aXR5SW50ZXJmYWNlXG4gICAgICAjIGNoZWNrIHRoYXQgdGhlIGdpdmVuIGVudGl0eSBjb21wbGllcyB0byB0aGUgcHJldmlvdXNseSBnaXZlbiBpbnRlcmZhY2VcbiAgICAgIGZvciBuYW1lIG9mIEBlbnRpdHlJbnRlcmZhY2VcbiAgICAgICAgaWYgbm90IChlbnRpdHlbbmFtZV0gaW5zdGFuY2VvZiBAZW50aXR5SW50ZXJmYWNlW25hbWVdKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdpdmVuIGVudGl0eSBkb2VzIG5vdCBjb21wbHkgdG8gdGhlIHJvbGUncyBuZWVkZWQgaW50ZXJmYWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUgbWlzc2luZzogYFwiICsgbmFtZSArIFwiYCBvZiB0eXBlIFwiICsgQGVudGl0eUludGVyZmFjZVtuYW1lXSlcblxuICBhcHBseVRvOiAoZW50aXR5KS0+XG4gICAgQHZhbGlkYXRlSW50ZXJmYWNlQWdhaW5zdChlbnRpdHkpXG4gICAgcmV0dXJuIG5ldyBBY3RvcihALCBlbnRpdHkpXG5cblxuY2xhc3MgQWN0b3JcbiAgIyBhbiBhY3RvciBpcyBhIHJvbGUgcHJveHksIGl0IGV4cG9zZXMgdGhlIHNhbWUgaW50ZXJmYWNlIGFzIHRoZSByb2xlIHNwZWNpZmljYXRpb24gYnV0IHdpbGwgYXBwbHkgaXRzIG1ldGhvZHMgdG8gdGhlXG4gICMgZ2l2ZW4gZW50aXR5XG4gICMgdGhpcyB3YXksIHRoZSBvcmlnaW5hbCBlbnRpdHkgb2JqZWN0IGlzIGxlZnQgcHJpc3RpbmUgYW5kIGNhbiBlYXNpbHkgaW1wZXJzb25hdGUgb3RoZXIgcm9sZXMgYXQgdGhlIHNhbWUgdGltZVxuICAjIHdpdGhvdXQgb3RoZXIgcm9sZXMgaW50ZXJmZXJpbmcgd2l0aCBlYWNoIG90aGVyXG4gIGNvbnN0cnVjdG9yOiAocm9sZSwgZW50aXR5KS0+XG4gICAgQGVudGl0eSA9IGVudGl0eVxuICAgIEByb2xlID0gcm9sZVxuXG4gICAgZm9yIG5hbWUgb2YgQHJvbGUuc3BlY1xuICAgICAgQFtuYW1lXSA9IEByb2xlLnNwZWNbbmFtZV0uYmluZChAZW50aXR5KVxuXG51c2VDYXNlRmFjdG9yeSA9IChyb2xlcywgbWV0aG9kKS0+XG4gIHJldHVybiAoZW50aXRpZXMpLT5cbiAgICAjIGNyZWF0ZSB0aGUgYWN0b3JzIHRoZSB1c2UgY2FzZSB3aWxsIG1hbmFnZVxuICAgIGFjdG9ycyA9IHt9XG4gICAgZm9yIG5hbWUgb2YgZW50aXRpZXNcbiAgICAgIGFjdG9yc1tuYW1lXSA9IHJvbGVzW25hbWVdLmFwcGx5VG8oZW50aXRpZXNbbmFtZV0pXG5cbiAgICByZXR1cm4gbWV0aG9kLmNhbGwobnVsbCwgYWN0b3JzKVxuXG5leHBvcnRzLmNvbnRleHQgPSAocm9sZXMsIHVzZUNhc2VzKS0+XG4gICMgdmFsaWRhdGUgcm9sZXNcbiAgZm9yIG5hbWUgb2Ygcm9sZXNcbiAgICBpZiBub3QgKHJvbGVzW25hbWVdIGluc3RhbmNlb2YgUm9sZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJvbGVzIGNhbiBvbmx5IGJlIGluc3RhbmNlcyBvZiBSb2xlXCIpXG5cbiAgaWYgT2JqZWN0LmtleXModXNlQ2FzZXMpLmxlbmd0aCA9PSAwXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb250ZXh0IG11c3QgYmUgYWJsZSB0byBlbmFjdCBhdCBsZWFzdCBvbmUgdXNlIGNhc2UnKVxuXG4gIHVzZUNhc2VzUHJveGllcyA9IHt9XG4gIGZvciBuYW1lIG9mIHVzZUNhc2VzXG4gICAgdXNlQ2FzZXNQcm94aWVzW25hbWVdID0gdXNlQ2FzZUZhY3Rvcnkocm9sZXMsIHVzZUNhc2VzW25hbWVdKVxuXG4gIHJldHVybiB1c2VDYXNlc1Byb3hpZXNcblxuZXhwb3J0cy5yb2xlID0gKHJvbGVTcGVjLCBlbnRpdHlJbnRlcmZhY2UpLT5cbiAgcmV0dXJuIG5ldyBSb2xlKHJvbGVTcGVjLCBlbnRpdHlJbnRlcmZhY2UpXG4iXX0=