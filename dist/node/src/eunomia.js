var Actor, Role, useCaseFactory;

Role = (function() {
  function Role(spec, entityInterface) {
    this.validateSpec(spec);
    this.spec = spec;
    this.entityInterface = entityInterface;
  }

  Role.prototype.validateSpec = function(spec) {
    var name, _results;
    _results = [];
    for (name in spec) {
      if (!(spec[name] instanceof Function)) {
        throw new Error('Given spec is not accepted');
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Role.prototype.validateInterfaceAgainst = function(entity) {
    var klass, name, obj, _results;
    if (this.entityInterface) {
      _results = [];
      for (name in this.entityInterface) {
        obj = entity[name];
        klass = this.entityInterface[name];
        if (obj instanceof klass || toString.call(obj) === "[object " + klass.name + "]") {
          continue;
        }
        throw new Error("Given entity does not comply to the role's needed interface, attribute missing: `" + name + "` of type " + this.entityInterface[name]);
      }
      return _results;
    }
  };

  Role.prototype.applyTo = function(entity) {
    this.validateInterfaceAgainst(entity);
    return new Actor(this, entity);
  };

  return Role;

})();

Actor = (function() {
  function Actor(role, entity) {
    var name;
    this.entity = entity;
    this.role = role;
    for (name in this.role.spec) {
      this[name] = this.role.spec[name].bind(this.entity);
    }
  }

  return Actor;

})();

useCaseFactory = function(roles, method) {
  return function(entities) {
    var actors, name;
    actors = {};
    for (name in entities) {
      actors[name] = roles[name].applyTo(entities[name]);
    }
    return method.call(null, actors);
  };
};

exports.context = function(roles, useCases) {
  var name, useCasesProxies;
  for (name in roles) {
    if (!(roles[name] instanceof Role)) {
      throw new Error("Roles can only be instances of Role");
    }
  }
  if (Object.keys(useCases).length === 0) {
    throw new Error('Context must be able to enact at least one use case');
  }
  useCasesProxies = {};
  for (name in useCases) {
    useCasesProxies[name] = useCaseFactory(roles, useCases[name]);
  }
  return useCasesProxies;
};

exports.role = function(roleSpec, entityInterface) {
  return new Role(roleSpec, entityInterface);
};

//# sourceMappingURL=data:application/json;base64,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QUMsS0FBRCxFQUFRLFFBQVIsR0FBQTtBQUVoQixNQUFBLHFCQUFBO0FBQUEsT0FBQSxhQUFBLEdBQUE7QUFDRSxJQUFBLElBQUcsQ0FBQSxDQUFLLEtBQU0sQ0FBQSxJQUFBLENBQU4sWUFBdUIsSUFBeEIsQ0FBUDtBQUNFLFlBQVUsSUFBQSxLQUFBLENBQU8scUNBQVAsQ0FBVixDQURGO0tBREY7QUFBQSxHQUFBO0FBSUEsRUFBQSxJQUFHLE1BQU0sQ0FBQyxJQUFQLENBQVksUUFBWixDQUFxQixDQUFDLE1BQXRCLEtBQWdDLENBQW5DO0FBQ0UsVUFBVSxJQUFBLEtBQUEsQ0FBTyxxREFBUCxDQUFWLENBREY7R0FKQTtBQUFBLEVBT0EsZUFBQSxHQUFrQixFQVBsQixDQUFBO0FBUUEsT0FBQSxnQkFBQSxHQUFBO0FBQ0UsSUFBQSxlQUFnQixDQUFBLElBQUEsQ0FBaEIsR0FBd0IsY0FBQSxDQUFlLEtBQWYsRUFBc0IsUUFBUyxDQUFBLElBQUEsQ0FBL0IsQ0FBeEIsQ0FERjtBQUFBLEdBUkE7QUFXQSxTQUFPLGVBQVAsQ0FiZ0I7QUFBQSxDQXREbEIsQ0FBQTs7QUFBQSxPQXNFTyxDQUFDLElBQVIsR0FBZSxTQUFDLFFBQUQsRUFBVyxlQUFYLEdBQUE7QUFDYixTQUFXLElBQUEsSUFBQSxDQUFLLFFBQUwsRUFBZSxlQUFmLENBQVgsQ0FEYTtBQUFBLENBdEVmLENBQUEiLCJmaWxlIjoiZXVub21pYS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFJvbGVcbiAgY29uc3RydWN0b3I6IChzcGVjLCBlbnRpdHlJbnRlcmZhY2UpLT5cbiAgICBAdmFsaWRhdGVTcGVjKHNwZWMpXG4gICAgQHNwZWMgPSBzcGVjXG4gICAgIyBlbnRpdHlJbnRlcmZhY2UgaXMgYSBub24gbWFuZGF0b3J5IGludGVyZmFjZSB0byB3aGljaCBlbnRpdGllcyBuZWVkIHRvIGNvbXBseSB0b1xuICAgIEBlbnRpdHlJbnRlcmZhY2UgPSBlbnRpdHlJbnRlcmZhY2VcblxuICB2YWxpZGF0ZVNwZWM6IChzcGVjKS0+XG4gICAgIyBhIHNwZWMgcmVwcmVzZW50cyB0aGUgcm9sZSdzIG1ldGhvZHMsIG5lZWQgdG8gY29udGFpbiBvbmx5IG1ldGhvZHMgYW5kIG5vIHN0YXRlXG4gICAgZm9yIG5hbWUgb2Ygc3BlY1xuICAgICAgaWYgbm90IChzcGVjW25hbWVdIGluc3RhbmNlb2YgRnVuY3Rpb24pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignR2l2ZW4gc3BlYyBpcyBub3QgYWNjZXB0ZWQnKVxuXG4gIHZhbGlkYXRlSW50ZXJmYWNlQWdhaW5zdDogKGVudGl0eSktPlxuICAgIGlmIEBlbnRpdHlJbnRlcmZhY2VcbiAgICAgICMgY2hlY2sgdGhhdCB0aGUgZ2l2ZW4gZW50aXR5IGNvbXBsaWVzIHRvIHRoZSBwcmV2aW91c2x5IGdpdmVuIGludGVyZmFjZVxuICAgICAgZm9yIG5hbWUgb2YgQGVudGl0eUludGVyZmFjZVxuICAgICAgICBvYmogPSBlbnRpdHlbbmFtZV1cbiAgICAgICAga2xhc3MgPSBAZW50aXR5SW50ZXJmYWNlW25hbWVdXG5cbiAgICAgICAgaWYgb2JqIGluc3RhbmNlb2Yga2xhc3Mgb3IgdG9TdHJpbmcuY2FsbChvYmopIGlzIFwiW29iamVjdCBcIiArIGtsYXNzLm5hbWUgKyBcIl1cIlxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2l2ZW4gZW50aXR5IGRvZXMgbm90IGNvbXBseSB0byB0aGUgcm9sZSdzIG5lZWRlZCBpbnRlcmZhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUgbWlzc2luZzogYFwiICsgbmFtZSArIFwiYCBvZiB0eXBlIFwiICsgQGVudGl0eUludGVyZmFjZVtuYW1lXSlcblxuICBhcHBseVRvOiAoZW50aXR5KS0+XG4gICAgQHZhbGlkYXRlSW50ZXJmYWNlQWdhaW5zdChlbnRpdHkpXG4gICAgcmV0dXJuIG5ldyBBY3RvcihALCBlbnRpdHkpXG5cblxuY2xhc3MgQWN0b3JcbiAgIyBhbiBhY3RvciBpcyBhIHJvbGUgcHJveHksIGl0IGV4cG9zZXMgdGhlIHNhbWUgaW50ZXJmYWNlIGFzIHRoZSByb2xlIHNwZWNpZmljYXRpb24gYnV0IHdpbGwgYXBwbHkgaXRzIG1ldGhvZHMgdG8gdGhlXG4gICMgZ2l2ZW4gZW50aXR5XG4gICMgdGhpcyB3YXksIHRoZSBvcmlnaW5hbCBlbnRpdHkgb2JqZWN0IGlzIGxlZnQgcHJpc3RpbmUgYW5kIGNhbiBlYXNpbHkgaW1wZXJzb25hdGUgb3RoZXIgcm9sZXMgYXQgdGhlIHNhbWUgdGltZVxuICAjIHdpdGhvdXQgb3RoZXIgcm9sZXMgaW50ZXJmZXJpbmcgd2l0aCBlYWNoIG90aGVyXG4gIGNvbnN0cnVjdG9yOiAocm9sZSwgZW50aXR5KS0+XG4gICAgQGVudGl0eSA9IGVudGl0eVxuICAgIEByb2xlID0gcm9sZVxuXG4gICAgZm9yIG5hbWUgb2YgQHJvbGUuc3BlY1xuICAgICAgQFtuYW1lXSA9IEByb2xlLnNwZWNbbmFtZV0uYmluZChAZW50aXR5KVxuXG5cbnVzZUNhc2VGYWN0b3J5ID0gKHJvbGVzLCBtZXRob2QpLT5cbiAgcmV0dXJuIChlbnRpdGllcyktPlxuICAgICMgY3JlYXRlIHRoZSBhY3RvcnMgdGhlIHVzZSBjYXNlIHdpbGwgbWFuYWdlXG4gICAgYWN0b3JzID0ge31cbiAgICBmb3IgbmFtZSBvZiBlbnRpdGllc1xuICAgICAgYWN0b3JzW25hbWVdID0gcm9sZXNbbmFtZV0uYXBwbHlUbyhlbnRpdGllc1tuYW1lXSlcblxuICAgIHJldHVybiBtZXRob2QuY2FsbChudWxsLCBhY3RvcnMpXG5cblxuZXhwb3J0cy5jb250ZXh0ID0gKHJvbGVzLCB1c2VDYXNlcyktPlxuICAjIHZhbGlkYXRlIHJvbGVzXG4gIGZvciBuYW1lIG9mIHJvbGVzXG4gICAgaWYgbm90IChyb2xlc1tuYW1lXSBpbnN0YW5jZW9mIFJvbGUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSb2xlcyBjYW4gb25seSBiZSBpbnN0YW5jZXMgb2YgUm9sZVwiKVxuXG4gIGlmIE9iamVjdC5rZXlzKHVzZUNhc2VzKS5sZW5ndGggaXMgMFxuICAgIHRocm93IG5ldyBFcnJvcignQ29udGV4dCBtdXN0IGJlIGFibGUgdG8gZW5hY3QgYXQgbGVhc3Qgb25lIHVzZSBjYXNlJylcblxuICB1c2VDYXNlc1Byb3hpZXMgPSB7fVxuICBmb3IgbmFtZSBvZiB1c2VDYXNlc1xuICAgIHVzZUNhc2VzUHJveGllc1tuYW1lXSA9IHVzZUNhc2VGYWN0b3J5KHJvbGVzLCB1c2VDYXNlc1tuYW1lXSlcblxuICByZXR1cm4gdXNlQ2FzZXNQcm94aWVzXG5cblxuZXhwb3J0cy5yb2xlID0gKHJvbGVTcGVjLCBlbnRpdHlJbnRlcmZhY2UpLT5cbiAgcmV0dXJuIG5ldyBSb2xlKHJvbGVTcGVjLCBlbnRpdHlJbnRlcmZhY2UpXG4iXX0=